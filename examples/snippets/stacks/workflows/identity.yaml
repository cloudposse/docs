
workflows:
  check-setup:
    description: Verify that the environment is setup correctly to run these workflows.
    steps:
    - name: check-setup
      type: shell
      command : |-
        if [[ "$GEODESIC_SHELL" != "true" ]]; then
          echo "This workflow must be run from a Geodesic shell." >&2
          exit 1
        elif [[ -z $ATMOS_BASE_PATH ]] || [[ ! -d "$ATMOS_BASE_PATH/.git" ]]; then
          echo "ATMOS_BASE_PATH must be set to the root of the git repository." >&2
          echo "This is usually set automatically by Geodesic." >&2
          echo "To fix: run the Geodesic shell from the root of the git repository." >&2
          echo "  ATMOS_BASE_PATH: \"$ATMOS_BASE_PATH\"" >&2
          echo "  Current directory: \"$(pwd -P)\"" >&2
          exit 1
        elif [[ ! -d "$ATMOS_BASE_PATH/rootfs/usr/local/bin" ]]; then
          printf "No such directory: %s\n" "$ATMOS_BASE_PATH/rootfs/usr/local/bin" >&2
          exit 2
        fi

  all:
    description: Run all workflows
    steps:
      - command: workflow check-setup -f identity
      - command: workflow vendor -f identity
      - command: workflow deploy/all -f identity

  vendor:
    description: Vendor identity layer components and scripts.
    steps:
      - command: workflow vendor/components -f identity
      - command: workflow vendor/aws-config -f identity

  vendor/components:
    description: Vendor identity layer components.
    steps:
      - command: vendor pull --component aws-saml
      - command: vendor pull --component aws-sso
      - command: vendor pull --component aws-team-roles
      - command: vendor pull --component aws-teams

  vendor/aws-config:
    description: Vendor aws-config script.
    steps:
      - name: vendor-aws-config
        type: shell
        command: |-
          set -e
          : "${ATMOS_BASE_PATH:=.}"
          AWS_CONFIG_VERSION="1.227.0"
          printf "Updating AWS Config in $ATMOS_BASE_PATH/rootfs/usr/local/bin/aws-config\n"
          printf "Note: Rebuild Geodesic to apply script updates\n"
          curl -fsSL https://raw.githubusercontent.com/cloudposse/terraform-aws-components/$AWS_CONFIG_VERSION/rootfs/usr/local/bin/aws-config -o "$ATMOS_BASE_PATH/rootfs/usr/local/bin/aws-config"
          chmod +x "$ATMOS_BASE_PATH/rootfs/usr/local/bin/aws-config"

  deploy/all:
    description: Deploy all identity components.
    steps:
      - command: workflow deploy/saml -f identity
      - command: workflow deploy/sso -f identity
      - command: workflow deploy/teams -f identity
      - command: workflow update-aws-config -f identity

  deploy/saml:
    description: Update aws-saml configuration (when adding a new Identity Provider).
    steps:
      - command: terraform deploy aws-saml -s core-gbl-identity

  deploy/sso:
    description: Update aws-sso configuration.
    steps:
      - command: terraform deploy aws-sso -s core-gbl-root

  deploy/teams:
    description: Establish cross account AWS Teams roles for access.
    steps:
      - command: terraform deploy aws-teams -s core-gbl-identity
      - command: terraform deploy aws-team-roles -s core-gbl-artifacts
      - command: terraform deploy aws-team-roles -s core-gbl-audit
      - command: terraform deploy aws-team-roles -s core-gbl-auto
      - command: terraform deploy aws-team-roles -s core-gbl-dns
      - command: terraform deploy aws-team-roles -s core-gbl-identity
      - command: terraform deploy aws-team-roles -s core-gbl-network
      - command: terraform deploy aws-team-roles -s core-gbl-root
      - command: terraform deploy aws-team-roles -s core-gbl-security
      - command: terraform deploy aws-team-roles -s plat-gbl-dev
      - command: terraform deploy aws-team-roles -s plat-gbl-prod
      - command: terraform deploy aws-team-roles -s plat-gbl-sandbox
      - command: terraform deploy aws-team-roles -s plat-gbl-staging

  update-aws-config:
    description: Update AWS Config files.
    steps:
      - name: update-aws-config
        type: shell
        command: |-
          set -e
          printf "Updating AWS Config files in $ATMOS_BASE_PATH/rootfs/etc/aws-config\n"
          aws-config teams > "$ATMOS_BASE_PATH/rootfs/etc/aws-config/aws-config-teams"
          aws-config switch-roles > "$ATMOS_BASE_PATH/rootfs/etc/aws-config/aws-extend-switch-roles"
          aws-config switch-roles planner > "$ATMOS_BASE_PATH/rootfs/etc/aws-config/aws-extend-switch-roles-planner"

          diffs=$(git diff --name-only "$ATMOS_BASE_PATH/rootfs/etc/aws-config")
          if [[ -n $diffs ]] then
            printf "Updated: %s\n" "${diffs[@]}"
            printf "Note: Rebuild Geodesic to apply script updates\n"
          else
            printf "No changes\n"
          fi
