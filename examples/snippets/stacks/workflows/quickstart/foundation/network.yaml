workflows:
  all:
    description: run all workflows
    steps:
      - command: workflow vendor -f quickstart/foundation/network
      - command: workflow deploy/vpc -f quickstart/foundation/network
      - command: workflow deploy/tgw -f quickstart/foundation/network
      - command: workflow deploy/dns -f quickstart/foundation/network
      - command: workflow output/dns-name-servers -f quickstart/foundation/network
      - command: workflow deploy/acm -f quickstart/foundation/network
      - command: workflow deploy/vpn -f quickstart/foundation/network
      - command: workflow deploy/bastion -f quickstart/foundation/network

  vendor:
    description: Vendor component dependencies for the network layer.
    steps:
      - command: vendor pull --component tgw/hub
      - command: vendor pull --component tgw/attachment
      - command: vendor pull --component tgw/routes
      - command: vendor pull --component acm
      - command: vendor pull --component bastion
      - command: vendor pull --component dns-delegated
      - command: vendor pull --component dns-primary
      - command: vendor pull --component ec2-client-vpn
      - command: vendor pull --component vpc
      - command: vendor pull --component vpc-routes

  deploy/vpc:
    description: Provision VPCs for the network layer.
    steps:
      - command: terraform deploy vpc -s core-use1-auto
      - command: terraform deploy vpc -s core-use1-network
      - command: terraform deploy vpc -s plat-use1-sandbox
      - command: terraform deploy vpc -s plat-use1-dev
      - command: terraform deploy vpc -s plat-use1-staging
      - command: terraform deploy vpc -s plat-use1-prod

  # NOTE: cloud-nuke actually has a command for this. Have not tested it, but might be easier:
  #    https://github.com/gruntwork-io/cloud-nuke#usage
  destroy/vpc/default:
    description: Deprovision all the AWS default VPCs.
    steps:
      - type: shell
        command: wipe-default-vpcs

  deploy/tgw:
    description: Provision the Transit Gateway for connecting VPCs, including all attachments and routes.
    steps:
      - command: terraform deploy tgw/hub -s core-use1-network
      - command: terraform deploy tgw/attachment -s core-use1-network
      - command: terraform deploy tgw/attachment -s core-use1-auto
      - command: terraform deploy tgw/attachment -s plat-use1-sandbox
      - command: terraform deploy tgw/attachment -s plat-use1-dev
      - command: terraform deploy tgw/attachment -s plat-use1-staging
      - command: terraform deploy tgw/attachment -s plat-use1-prod
      - command: terraform deploy tgw/routes -s core-use1-network
      - command: terraform deploy vpc/routes/private -s core-use1-network
      - command: terraform deploy vpc/routes/private -s plat-use1-sandbox
      - command: terraform deploy vpc/routes/private -s plat-use1-dev
      - command: terraform deploy vpc/routes/private -s plat-use1-staging
      - command: terraform deploy vpc/routes/private -s plat-use1-prod

  deploy/dns:
    description: Configure the DNS "primary" and "delegated" stacks.
    steps:
      - command: echo 'Creating primary dns zones'
        type: shell
        name: primary
      - command: terraform deploy dns-primary -s core-gbl-dns
      - command: terraform deploy dns-primary -s plat-gbl-dev
      - command: terraform deploy dns-primary -s plat-gbl-staging
      - command: terraform deploy dns-primary -s plat-gbl-prod
      - command: terraform deploy dns-primary -s plat-gbl-sandbox
      - command: echo 'Creating delegated dns zones'
        type: shell
        name: delegated
      - command: terraform deploy dns-delegated -s core-gbl-auto
      - command: terraform deploy dns-delegated -s plat-gbl-sandbox
      - command: terraform deploy dns-delegated -s plat-gbl-dev
      - command: terraform deploy dns-delegated -s plat-gbl-staging
      - command: terraform deploy dns-delegated -s plat-gbl-prod

  output/dns-name-servers:
    description: Output NS records for each dns-primary
    steps:
      - type: shell
        command: |
          cd components/terraform/dns-primary
          function output-dns(){
            terraform workspace select $1 > /dev/null
            terraform output -json zones
          }
          for s in core-gbl-dns plat-gbl-{dev,staging,prod,sandbox} ; do
            output-dns $s
          done | jq 'to_entries[] | { (.key) : .value.name_servers }'

  deploy/acm:
    description: Provision AWS Certificate Manager for custom and ad-hoc requests.
    steps:
      - command: terraform deploy acm -s core-use1-auto
      - command: terraform deploy acm -s plat-use1-sandbox
      - command: terraform deploy acm -s plat-use1-dev
      - command: terraform deploy acm -s plat-use1-staging
      - command: terraform deploy acm -s plat-use1-prod

  deploy/vpn:
    description: Establish the AWS Client VPN in the core-network account.
    steps:
      - command: terraform deploy ec2-client-vpn -s core-use1-network
      - type: shell
        command: cd components/terraform/ec2-client-vpn && terraform output client_configuration | sed '1d;$d;$d' > ../../../rootfs/etc/aws-config/acme-core.ovpn

  deploy/bastion:
    description: |
      Provision the bastion hosts, which useful for accessing resources via SSH.
    steps:
      - command: terraform deploy bastion -s plat-use1-sandbox
      - command: terraform deploy bastion -s plat-use1-dev
      - command: terraform deploy bastion -s plat-use1-staging
      - command: terraform deploy bastion -s plat-use1-prod
      - command: terraform deploy bastion -s core-use1-network
