on:
  push:
    branches:
    - master
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types:
    - published

defaults:
  run:
    shell: bash +e -x -o pipefail {0}

env:
  HUGO_CONFIG: deploy.toml
  HTMLTEST_CONFIG: .htmltest.github_actions.yml
  YARN_BUILD_DISABLED: false
  COMPONENTS_BUILD: true
  CACHE_LOCATION: ./.htmltest/refcache.json
  DOCKER_RUN_FLAGS: "--rm"

jobs:
  hugo-build:
    name: "Build Hugo Site"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: "View github event data"
      run: cat ${GITHUB_EVENT_PATH}
    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v1
    - name: "Build docker image"
      uses: docker/build-push-action@v2
      with:
        tags: cloudposse/docs
        outputs: type=docker,dest=/tmp/image.tar
    - name: "Import Image"
      run: docker load --input /tmp/image.tar
    - name: "Build Hugo"
      run: |
        make lint
        make release
        make real-clean hugo/build
    - name: "Upload Docker image artifact"
      uses: actions/upload-artifact@v2
      with:
        name: docker-image
        path: /tmp/image.tar
    - name: "Upload Hugo site artifact"
      uses: actions/upload-artifact@v2
      with:
        name: hugo-site
        path: ./public

  htmltest-cache-previous-commit-check:
    name: "Check for Htmltest Cache from Previous Commit"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: "Get SHA"
      id: get_sha
      run: |
        # Using HEAD^# syntax to accommodate merges.
        # It's unclear how to optimize this (i.e., whether to use HEAD^1 or HEAD^2).
        # Perhaps a good approach is to have two versions of this step, each guarded
        # with if statements that check whether the previous commit was a merge commit.
        export sha_short=$(git rev-parse --short HEAD^1)
        echo "${sha_short}" > previous-commit-sha-short.txt
        echo "::set-output name=previous_sha_short::sha_short"
    - name: "Upload previous-commit SHA artifact"
      uses: actions/upload-artifact@v2
      with:
        name: previous-commit-sha-short
        path: previous-commit-sha-short.txt
    - name: "Extract cache pull location"
      id: get_cache_pull_location
      run: |
        export cache_pull_location=$( dirname "${{ env.CACHE_LOCATION }}" )
        echo "::set-output name=cache-pull-location::cache_pull_location"
    - name: "Pull htmltest cache from previous commit, if it exists"
      id: pull-htmltest-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.get_cache_pull_location.outputs.cache-pull-location }}
        key: htmltest-cache-${{ steps.get_sha.outputs.previous_sha_short }}
    - name: "Write htmltest cache previous commit hit status to file"
      run: echo "${{ steps.pull-htmltest-cache.outputs.cache-hit }}" > previous-commit-hit-status.txt
    - name: "Upload htmltest cache previous commit hit artifact"
      uses: actions/upload-artifact@v2
      with:
        name: htmltest-cache-previous-commit-hit-status
        path: previous-commit-hit-status.txt

  htmltest-cache-merge-base-check:
    name: "Check for Htmltest Cache on Master"
    #if: false
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: "Get both head and base branch names"
      id: get_branch_names
      run: |
        echo "::set-output name=head-branch-name::$( ${{ github.head_ref }}#refs/heads/ )"
        echo "${{ steps.get_branch_names.outputs.head-branch-name }}"
        echo "::set-output name=base-branch-name::$( ${{ github.base_ref }}#refs/heads/ )"
        echo "${{ steps.get_branch_names.outputs.base-branch-name }}"
    - name: "Get SHA of most recent commit shared by feature branch and base branch"
      id: get_sha
      run: |
        export last_base_commit=$(git merge-base ${{ steps.get_branch_names.outputs.base-branch-name }} ${{ steps.get_branch_names.outputs.head_branch-name }})
        export sha_short=$(git rev-parse --short ${last_base_commit})
        echo "${sha_short}" > merge-base-sha-short.txt
        echo "::set-output name=merge_base_sha_short::sha_short"
    - name: "Upload merge-base SHA artifact"
      uses: actions/upload-artifact@v2
      with:
        name: merge-base-sha-short
        path: merge-base-sha-short.txt
    - name: "Extract cache pull location"
      id: get_cache_pull_location
      run: |
        export cache_pull_location=$( dirname "${{ env.CACHE_LOCATION }}" )
        echo "::set-output name=cache-pull-location::cache_pull_location"
    - name: "Pull htmltest cache from merge base, if it exists"
      id: pull-htmltest-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.get_cache_pull_location.outputs.cache-pull-location }}
        key: htmltest-cache-${{ steps.get_sha.outputs.merge_base_sha_short }}
    - name: "Write htmltest cache merge base hit status to file"
      run: echo "${{ steps.pull-htmltest-cache.outputs.cache-hit }}" > merge-base-hit-status.txt
    - name: "Upload htmltest cache merge base hit artifact"
      uses: actions/upload-artifact@v2
      with:
        name: htmltest-cache-merge-base-hit-status
        path: merge-base-hit-status.txt

  htmltest-cache-pull:
    name: "Pull And Update Htmltest Cache"
    runs-on: ubuntu-latest
    if: always()
    needs: [hugo-build, htmltest-cache-previous-commit-check, htmltest-cache-merge-base-check]
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: "Download htmltest cache previous-commit hit artifact"
      uses: actions/download-artifact@v2
      with:
        name: htmltest-cache-previous-commit-hit-status
        path: previous-commit-hit-status.txt
    - name: "Download previous-commit SHA artifact"
      uses: actions/download-artifact@v2
      with:
        name: previous-commit-sha-short
        path: previous-commit-sha-short.txt
    - name: "Download htmltest cache merge-base hit artifact"
      if: github.event_name == 'pull_request'
      uses: actions/download-artifact@v2
      with:
        name: htmltest-cache-merge-base-hit-status
        path: merge-base-hit-status.txt
    - name: "Download merge-base SHA artifact"
      if: github.event_name == 'pull_request'
      uses: actions/download-artifact@v2
      with:
        name: merge-base-sha-short
        path: merge-base-sha-short.txt
    - name: "Read htmltest cache hit statuses and SHAs into variables"
      id: get_hit_statuses_and_shas
      run: |
        export previous_commit_hit=$(echo ./previous-commit-hit-status.txt)
        echo "${previous_commit_hit}"
        echo "::set-output name=previous-commit-hit::previous_commit_hit"
        export previous_commit_sha_short=$(echo ./previous-commit-sha-short.txt)
        echo "${previous_commit_sha_short}"
        echo "::set-output name=previous-commit-sha-short::previous_commit_sha_short"
        if [ ${{ github.event_name }}=="pull_request" ]; then
          export merge_base_hit=$(echo ./merge-base-hit-status.txt)
          echo "${merge_base_hit}"
          echo "::set-output name=merge-base-hit::merge_base_hit"
          export merge_base_sha_short=$(echo ./merge-base-sha-short.txt)
          echo "${merge_base_sha_short}"
          echo "::set-output name=merge-base-sha-short::merge_base_sha_short"
        else
          export merge_base_hit=false
          echo "${merge_base_hit}"
          echo "::set-output name=merge-base-hit::merge_base_hit"
          export merge_base_sha_short=none
          echo "${merge_base_sha_short}"
          echo "::set-output name=merge-base-sha-short::merge_base_sha_short"
        fi
    - name: "Extract cache pull location, if either of the caches exist"
      if: ${{ steps.get_hit_statuses_and_shas.outputs.previous-commit-hit }}==true || ${{ steps.get_hit_statuses_and_shas.outputs.merge-base-hit }}==true
      id: get_cache_pull_location
      run: |
        export cache_pull_location=$( dirname "${{ env.CACHE_LOCATION }}" )
        echo "::set-output name=cache-pull-location::cache_pull_location"
    - name: "Get SHA of preferred available cache"
      if: ${{ steps.get_hit_statuses_and_shas.outputs.previous-commit-hit }}==true || ${{ steps.get_hit_statuses_and_shas.outputs.merge-base-hit }}==true
      id: get_sha
      run: |
        if [ ${{ steps.get_hit_statuses_and_shas.outputs.previous-commit-hit }}==true ]; then
          echo "::set-ouput name=cache-sha::${{ steps.get_hit_statuses_and_shas.outputs.previous-commit-sha-short }}"
        else
          echo "::set-ouput name=cache-sha::${{ steps.get_hit_statuses_and_shas.outputs.merge-base-sha-short }}"
        fi
        echo "${{ steps.get_head_branch_name.outputs.head-branch-name }}"
    - name: "Pull htmltest cache, if any exists, from preferred commit"
      if: ${{ steps.get_hit_statuses_and_shas.outputs.previous-commit-hit }}==true || ${{ steps.get_hit_statuses_and_shas.outputs.merge-base-hit }}==true
      id: htmltest-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.get_cache_pull_location.outputs.cache-pull-location }}
        key: htmltest-cache-${{ steps.get_sha.cache-sha }}
    - name: "Download Docker image artifact"
      uses: actions/download-artifact@v2
      with:
        name: docker-image
        path: /tmp/
    - name: "Import Image"
      run: docker load --input /tmp/image.tar
    - name: "Update htmltest cache (ignore failures)"
      run: make real-clean smoketest || true
    - name: "Upload htmltest cache artifact"
      uses: actions/upload-artifact@v2
      with:
        name: hugo-cache
        path: ${{ env.CACHE_LOCATION }}

  htmltest-cache-update:
    name: "Push Updated Htmltest Cache"
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: htmltest-cache-pull
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: "Get SHA"
      id: get_sha
      shell: bash
      run: echo "::set-output name=current_sha_short::$(git rev-parse --short HEAD)"
    - name: "Download htmltest cache artifact"
      uses: actions/download-artifact@v2
      with:
        name: hugo-cache
        path: ${{ env.CACHE_LOCATION }}
    - name: "Push new htmltest cache cache"
      id: htmltest-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CACHE_LOCATION }}
        key: htmltest-cache-${{ steps.get_sha.outputs.current_sha_short }}

  hugo-test:
    name: "Test Hugo Site"
    runs-on: ubuntu-latest
    needs: htmltest-cache-update
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: "Get SHA"
      id: get_sha
      shell: bash
      run: echo "::set-output name=current_sha_short::$(git rev-parse --short HEAD)"
    - name: "Extract cache pull location"
      id: get_cache_pull_location
      run: |
        export cache_pull_location=$( "${{ env.CACHE_LOCATION }}" | sed 's|\(.*\)/.*|\1|')
        echo "::set-output name=cache-pull-location::cache_pull_location"
    - name: "Pull new htmltest cache"
      id: htmltest-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.get_cache_pull_location.outputs.cache-pull-location }}
        key: htmltest-cache-${{ steps.get_sha.outputs.current_sha_short }}
    - name: "Download Docker image artifact"
      uses: actions/download-artifact@v2
      with:
        name: docker-image
        path: /tmp/
    - name: "Import Image"
      run: docker load --input /tmp/image.tar
    - name: "Hugo Site Smoketest, No Training Wheels"
      run: make real-clean smoketest

  hugo-deploy:
    name: "Deploy New Site Resources"
    runs-on: ubuntu-latest
    needs: hugo-test
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: "Get SHA"
      id: get_sha
      shell: bash
      run: echo "::set-output name=current_sha_short::$(git rev-parse --short HEAD)"
    - name: "Download Docker image artifact"
      uses: actions/download-artifact@v2
      with:
        name: docker-image
        path: /tmp/
    - name: "Import Image"
      run: docker load --input /tmp/image.tar
    - name: "Download Hugo site artifact"
      uses: actions/download-artifact@v2
      with:
        name: hugo-site
        path: ./public
    - name: "Pull new htmltest cache"
      id: htmltest-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CACHE_LOCATION }}
        key: htmltest-cache-${{ steps.get_sha.outputs.current_sha_short }}
    - name: "Push Site to S3"
      run: make deploy
    - name: "Push New Index to Algolia"
      run: make reindex
    - name: "Update Cloudflare Cache"
      run: make invalidate-cache
